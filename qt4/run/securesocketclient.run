#
# Build
#

set build_components {
	core init
	drivers/timer drivers/framebuffer drivers/pci drivers/input drivers/nic
	server/nitpicker server/ram_fs
	test/securesocketclient
}

build $build_components

create_boot_directory

#
# Generate config
#

append config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="CAP"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>}

append_if [have_spec sdl] config {
	<start name="fb_sdl">
		<resource name="RAM" quantum="4M"/>
		<provides>
			<service name="Input"/>
			<service name="Framebuffer"/>
		</provides>
	</start>}

append_if [have_spec pci] config {
	<start name="pci_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="PCI"/></provides>
	</start>}

append_if [have_spec vesa] config {
	<start name="vesa_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Framebuffer"/></provides>
	</start>}

append_if [have_spec pl11x] config {
	<start name="pl11x_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Framebuffer"/></provides>
	</start>}

append_if [have_spec ps2] config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start> }

append config {
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="nic_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Nic"/></provides>
	</start>
	<start name="nitpicker">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Nitpicker"/></provides>
	</start>
	<start name="ram_fs">
		<resource name="RAM" quantum="50M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<policy label="" root="/" writeable="yes" />
		</config>
	</start>
	<start name="securesocketclient">
		<resource name="RAM" quantum="100M"/>
	</start>
</config>}

install_config $config

#<content>
#<dir name="etc">
#<inline name="openssl.cnf">
#HOME                    = /
#RANDFILE                = /.rnd

#openssl_conf = openssl_def

#[openssl_def]
#engines = engine_section

#[engine_section]
#gost = gost_section

#[gost_section]
#dynamic_path = /libgost.lib.so
#engine_id = gost
#default_algorithms = ALL
#init=0
#</inline>
#</dir>
#</content>


#
# Boot modules
#

# generic modules
set boot_modules {
	core init
	timer nic_drv
	nitpicker ram_fs
	ld.lib.so
	libc.lib.so libm.lib.so
	lwip.lib.so
	zlib.lib.so libpng.lib.so jpeg.lib.so
	dejavusans.lib.so
	freetype.lib.so
	libc_lock_pipe.lib.so
	qt_core.lib.so
	qt_gui.lib.so
	qt_network.lib.so
	libc_fs.lib.so
	libcrypto.lib.so libssl.lib.so libgost.lib.so
	stdcxx.lib.so
	securesocketclient
}


# platform-specific modules
lappend_if [have_spec linux] boot_modules fb_sdl
lappend_if [have_spec pci]   boot_modules pci_drv
lappend_if [have_spec vesa]  boot_modules vesa_drv
lappend_if [have_spec ps2]   boot_modules ps2_drv
lappend_if [have_spec pl11x] boot_modules pl11x_drv

build_boot_image $boot_modules

append qemu_args " -m 256 "

append_if [have_spec x86]     qemu_args " -net nic,model=pcnet "
append_if [have_spec lan9118] qemu_args " -net nic,model=lan9118 "

append qemu_args " -net user "

run_genode_until forever
