#
# \brief  Run-script for ksyslabs.* websites
# \author Norman Feske
# \author Nikolay Golikov <nik@ksyslabs.org>
# \date   2013-05-20
#

set build_components {
	core init
	drivers/pci
	drivers/nic
	drivers/timer
	server/tar_fs
	app/lighttpd
}

build $build_components

create_boot_directory

append config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="LOG"/>
		<service name="CAP"/>
		<service name="RAM"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="PD"/>
		<service name="IRQ"/>
		<service name="IO_PORT"/>
		<service name="IO_MEM"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>}

append_if [have_spec pci] config {
	<start name="pci_drv">
		<resource name="RAM" quantum="10M"/>
		<provides><service name="PCI"/></provides>
	</start>}

append config {
	<start name="nic_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Nic"/></provides>
	</start>
	<start name="tar_fs">
		<resource name="RAM" quantum="10M"/>
		<provides><service name="File_system"/></provides>
		<config>
			<archive name="htdocs.tar" />
			<policy label="lighttpd" root="/" />
		</config>
	</start>
	<start name="lighttpd">
		<resource name="RAM" quantum="1G" />
		<config>
			<arg value="lighttpd" />
			<arg value="-f" />
			<arg value="/etc/lighttpd/lighttpd.conf" />
			<arg value="-D" />
		</config>
	</start>}

append config {
</config>}

install_config $config

#
# Websites mirroring
#

# Virtual hosts and content sources
set urls(ksyslabs.org) http://ksyslabs.org
set urls(ksyslabs.ru)  http://ksyslabs.ru
set urls(ksyslabs.com)  http://ksyslabs.com

set default_website ksyslabs.org

exec mkdir -p bin/htdocs

# lighttpd configuration
exec mkdir -p bin/htdocs/etc/lighttpd
set fd [open "bin/htdocs/etc/lighttpd/lighttpd.conf" w]
puts $fd "
server.port                    = 80
server.document-root           = \"/$default_website\"
"

puts $fd {
server.event-handler           = "select"
server.network-backend         = "write"
server.max-keep-alive-requests = 0
index-file.names               = ( "index.html", "index.htm" )
mimetype.assign                = (
                                   ".png"  => "image/png",
                                   ".jpg"  => "image/jpeg",
                                   ".jpeg" => "image/jpeg",
                                   ".gif"  => "image/gif",
                                   ".css"  => "text/css",
                                   ".html" => "text/html",
                                   ".htm"  => "text/html",
                                   ""      => "text/html",
                                 ) }
foreach name [array names urls] {
	puts $fd "
\$HTTP\[\"host\"\] =~ \"(^|www\.)$name\" {
	server.document-root = \"/$name\"
	}
	"
}
close $fd

foreach name [array names urls] {
	set dir bin/htdocs/$name
	if {[file exists $dir/index.html]} {
		puts "Site $name already mirrored"
		continue
	}
	puts "Mirroring $name to $dir..."
	exec mkdir -p $dir
   
   # ignore wget errors 
	catch {
		exec wget -nH -rc -P $dir $urls($name)
	}
	exec touch $dir/favicon.ico
}

exec tar cfv bin/htdocs.tar -h -C bin/htdocs .

#
# Boot modules
#

# generic modules
set boot_modules {
	core init timer ld.lib.so nic_drv tar_fs
	libc.lib.so libm.lib.so libc_fs.lib.so libc_log.lib.so
	lwip.lib.so zlib.lib.so libcrypto.lib.so libssl.lib.so 
	pcre.lib.so readline.lib.so
	lighttpd htdocs.tar
}

# platform-specific modules
lappend_if [have_spec pci] boot_modules pci_drv

build_boot_image $boot_modules

append_if [have_spec x86]     qemu_args " -net nic,model=e1000 "
append_if [have_spec lan9118] qemu_args " -net nic,model=lan9118 "

append qemu_args " -net user -redir tcp:5555::80 "
append qemu_args " -nographic -serial mon:stdio "

run_genode_until forever
